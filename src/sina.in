#!/bin/bash

# find base directory (i.e. ARBHOME)
# implement recursive symlink resolution manually because 
# OSX readlink lacks -f or -m options
pushd . >/dev/null # save cwd
# full path of this script, but may be symlinked
me="${BASH_SOURCE[0]}"
# while me is symlink
while [ -h "$me" ]; do 
  # change to directory where symlink "$me" resides
  cd "$(dirname "$me")"
  # set $me to whatever $me links to
  me="$(readlink "$(basename "$me")")"
done
# me isn't a symlink, so the directory it resides in
# must be the actual $ARBHOME
cd "$(dirname "$me")"
MYDIR="$PWD"
# back to original cwd
popd >/dev/null

# remove trailing /bin if there is one
PREFIX=${MYDIR%%/bin}

for SUBD in "" /lib/arb /lib/sina /lib/sina/arb ; do
  if [ -e "$PREFIX$SUBD/lib/arb_tcp.dat" ]; then
     export ARBHOME="$PREFIX$SUBD"
     break;
  fi
done
if [ -z "$ARBHOME" ]; then
  echo "Unable to detect location of ARBHOME. Aborting." >&2
  exit 1
fi

# find libs in ARBHOME/lib
case `uname` in
Linux)
  if [ -z "$LD_LIBRARY_PATH" ]; then 
    LD_LIBRARY_PATH="$ARBHOME/lib"
  else 
    LD_LIBRARY_PATH="$ARBHOME/lib":"$LD_LIBRARY_PATH"
  fi
  export LD_LIBRARY_PATH
;;
Darwin)
  if [ -z "$DYLD_FALLBACK_LIBRARY_PATH" ]; then 
    DYLD_FALLBACK_LIBRARY_PATH="$ARBHOME/lib"
  else 
    DYLD_FALLBACK_LIBRARY_PATH="$ARBHOME/lib":"$DYLD_FALLBACK_LIBRARY_PATH"
  fi
  export DYLD_FALLBACK_LIBRARY_PATH
;;
esac

# find binaries in ARBHOME/bin
PATH="$ARBHOME/bin":"$PATH"
export PATH

# show manual if the only argument is "manual"
if [ "$*" == "manual" ]; then
  if [ -z $PAGER ]; then 
    if which less >/dev/null; then
      PAGER=less
    elif which more > /dev/null; then
      PAGER=more
    else
      PAGER=cat
    fi
  fi
  if which groff > /dev/null; then
    groff -man -T ascii $PREFIX/share/man/man1/sina.1 | $PAGER
  else
    echo "Need \"groff\" to show man file!"
  fi
  exit
fi

exec "$PREFIX/bin/sina.real" "$@"
